JSTAR
======



What   is  JSTAR ?  Why it is   focused?


Jstar  is  a  cloud  computing  webdesign  Technology    invented  by  wilmix  jemin j  in year  2014.


and  JSTAR  is   released  at  June  2016.


JStar  uses   Wilmix Remote  Server   to publish   the  Webpage  in   the  internet..

So   Users  can  see  the  webpage   from  internet ,and ,WALLET..
Clients   and   companies    purchase      the   cloud  computing   servers   which  is more  cost  at  olden  days.


CloudComputing    using  this  way    has  less    security.

  When   the client  purchase  the  remoteserver ,it  will  be   less  cost  for client  than  

olden  methods..  So  this  lead  to    birth   of   Cloud   Computing  webdesign.

So   using   this   Technology  client    can   access    the    webpage  through   WALLET, mobiles

and   other  computers, laptop,et.  And  the  Cloud   website(Cloud  JSTAR Program)   will   even  travel   in   web...


    
HISTORY   of  JSTAR

--------------------------------------

JSTAR   is invented   in  year  2014  by wilmix jemin  j.


we  can easily  build  a  JSTAR  Program...


 
 
 
<JSTAR>
 
<WPACK>
 
<LOGIC>
 
 
<!  JSTAR  LOGIC !>
 
</LOGIC>
 
</JSTAR>




Introduction - UNIT 1- JSTAR Fundemantals
=============================================

ABOUT   JSTAR
-----------------
JSTAR  follows   Cdollar  Programming  oops style...

So  one  who   brush  up throughly  with CDollar Programming can  easily  program  it... 

Who can   focus?

Any   C/C++,PHP Professionals, OOPS Professionals can  easily  focus  it.





Program1: abcd.jstar
--------------



<JSTAR>

<WPACK>

<LOGIC>

 abstract class  abcd <--- <THREAD>  //thread

{

<VOLATILE> int v1;  //  synchronization happens   only  at  variable level similar  to volatile
Shared <TRANS> int v;  // Transient  state  is  not saved.



~  //  destructor  in C++
{

CDollar.out.println("object  is    deleted");

}
public  int  getnum1()

{



return(v1);
}

Shared int s3;
public Shared void  operator *(int s1 ,int s2) //operator  overloading   C++
{

s3=s1 * s2;

CDollar.out.println(""+s3);
}

 public void  CDOLLAR-Main( ) throws  <EXE>
{

int  a[]  <Array> int[1000];


 operator *(10,10);
 
 operator *(200,10000);



<AList>  ar  = <NEW>  <AList>();  //Arraylist  in  java



for(int  i=999;i>=0;i--)
{

a[i]=i;

ar.add(i);
}

<A>.<SORT>(a);  // Array.Sort(array a)


for(int  i=0;i<=999;i++)
CDollar.out.println("  "+i);

CDollar.out.println("  "+<A>.<BinarySearch>(a,-5));  //perform  binary search



<WR>  it  =  ar.record(); //  simillar  to iterator in java


while(it.<HAS>)

{
<OBJECT>  el   =  it.<NEXT>;

CDollar.out.println(" data= "+el);


}
<LR>  it1  =  ar.<LISTLR>; //List  iterator  in  java
while(it1.<HASP>)

{
<OBJECT>  el1   =  it1.<PREVIOUS>;  //move  backward   and  print it

CDollar.out.println(" data1= "+el1);
}



<------
while  (es.<HASEMORE>)

{

<OBJECT>  el11   =  es.<NEXTEL>;

CDollar.out.println(" data1= "+el1);
}
------>


<DATE>  d2  =   <NEW>  <DATE>();  //  DATE class  in cdollar


CDollar.out.println("month="+<Month>);
CDollar.out.println("Year="+<Y>);
CDollar.out.println("Hour="+<H>);
CDollar.out.println("Sec="+<SEC>);

//<VOLATILE> int v1;

//<TRANS> int v;

v=20;

<FOUTPUTSTREAM> os1  =  <NEW>  <FOUTPUTSTREAM>("out1.txt"); //fileoutputstream in  java
<OOUTPUTSTREAM> d  =  <NEW> <OOUTPUTSTREAM>(os1); //object  outputstream in  java

d.<WRITEOBJ>(v);// write the   value  in file  out.txt
d.<WRITEOBJ>(ar);write   the  arraylsit  object

<FINPUTSTREAM> osd  =  <NEW>  <FINPUTSTREAM>("out1.txt");
<OINPUTSTREAM>  br  =  <NEW>  <OINPUTSTREAM>(osd);

<OBJECT>  ar7  =  br.<OBJECTREAD>;  //read   the  object  from   file

CDollar.out.println(""+ar7);  and  Print  the contents  of file  out1.txt


<STACK> s=  <NEW>  <STACK>(); //  stack  in  cdollar

s.<PUSH>(100);//push  100
s.<PUSH>(2000);// push 2000
s.<POP>;// pop last

CDollar.out.println(""+s);


<PRIORITYQUEUE>  q =  <NEW>  <PRIORITYQUEUE>();  //simillar  to priority queue  in java

q.add(1000);

q.add(544);
q.add(66);
q.add(667888);
CDollar.out.println(""+q);
                 
      
TUBE  u =   <NEW>  TUBE("Wilmix");

for (int i=0;i<=100;i++)
u.add("col"+i);


<AList>   ar11  = <NEW>  <AList>();
for  (int j=0;j<=10;j++)
ar11.add(j);

CDollar.out.println(""+u.match("col5",5));
u.SETA("0001" , ar11.StringConvert());

CDollar.out.println(""+u.GETt1(1));
CDollar.out.println(""+u.GETt2(1));

u.SETB("Physics" , ar11.StringConvert());

CDollar.out.println(""+u.GETt11(1));
CDollar.out.println(""+u.GETt12(1));

           


}





}




</LOGIC>
</JSTAR>  
 

OUTPUT:

Kindly  see  the  screen shot  of  JSTAR   in GALAXY os....








Program -2 : logic.jstar
------------------------


<JSTAR>

<WPACK>

<LOGIC>



public   class  logic

{

public void  CDOLLAR-Main( )
{


CDollar.out.println("wilmix" +"wilmix");  



}

}

</LOGIC>
</JSTAR>


Output in webpage:
----------------------------

wilmixwilmix



Program -3: wabc.jstar
-----------------------



<JSTAR>

<WPACK>

<LOGIC>


class Main
{
 public  Main()
 {
 <SUPER>();
 }

 public void main1()
 {
 
 String  s="dsdds";
 
 {*}<<Str>> l Pointer<<Str>>(s);  //pointer to store the value
 
l.add(s);
 
 for (int i = 0; i NOT= l.size(); i = i + 1)
 {
 
 <OBJECT> obj=l.get(i);// get the object, <OBJECT> indicates object..
 CDollar.out.println(obj);
 
 
 
 }
 
 
 
 
 <STRUCTURE> <<OBJECT>> list = <NEW> <STRUCTURE> <<OBJECT>>(l.get(0).StringConvert()); // define  structure  as  object  type  and store the object
 
 for (int i11 = 0; i11 NOT= list.size(); i11 = i11 + 1)
 {
 
 
 
 <OBJECT>  el=list.ret(i11); //use   list iterator
 

 
 CDollar.out.println("SNO= "+el.StringConvert());//convert object to string

                }
 
 }
}


   class  wabc

{

 

public void  CDOLLAR-Main( )
{





Main  m  = <NEW> Main(); // create  MAIN  class  instance as m  

m.main1();//call  main1 function




}

}



</LOGIC>
</JSTAR>

OUTPUT:
------------



Construct  a  .c$ datastructure  in TreeNode.jstar
--------------------------------------------------------------------

Program -3: TreeNode.jstar
-------------------------------------


<JSTAR>

<WPACK>

<LOGIC>



class Main
{
 public Main()
 {
 <SUPER>();
 }

 
}

class TreeNode
{
 private TreeNode left = null; //left pointer
 private TreeNode right = null; ///right  pointer


 private String datum = null;

  private boolean useLeftNext = true;

 public TreeNode(String s)
 {
 <SUPER>();
 datum = s;
 }

 //add a String to the tree with this node at its root
 public void add(String s)
 {
 if (left == null)
 {
 left = <NEW> TreeNode(s);
 return;
 }

 if (right == null)
 {
 right = <NEW> TreeNode(s);
 return;
 }

 if (useLeftNext)
 {
 left.add(s);
 useLeftNext = false;
 return;
 }

 right.add(s);
 useLeftNext = true;
 }

 //print the tree below this node using an inorder traversal
 public void printTree()
 {
 if (left NOT= null)
 left.printTree();

 CDollar.out.println(datum + "\n");

 if (right NOT= null)
 right.printTree();
 }

 //get the size of the tree with this node at its root
 public int size()
 {
 int left = 0;
 if (<IS>.left NOT= null)
 left = <IS>.left.size();

 int right = 0;
 if (<IS>.right NOT= null)
 right = <IS>.right.size();

 return 1 + left + right;
 }
 
 public void  CDOLLAR-Main( )
 {
 //create the tree
 TreeNode root = <NEW> TreeNode("root");
 for (int i = 0; i NOT= 10; i = i + 1)
 {
 root.add("item " + i);
 }

 //print the tree's size and contents
 CDollar.out.println(root.size()+ "\n\n");
 root.printTree();
 }
 
 
}


</LOGIC>
</JSTAR




UNIT-2: JSTAR Design,Templates and Animations
===============================================




Program-4: abc.jstar
---------------------





<JSTAR>

<WPACK>

<LOGIC>



public   class  abc

{

public void  CDOLLAR-Main( )
{

GRAPHICS.Displayhtml.Design1("http://www.hdwallpaperspulse.com/wp-content/uploads/2013/08/08/wallpaper-115621.jpg",250,300);//insert  an  image 


GRAPHICS.Displayhtml.Design2(); //apply design2

HTML.displayhtml("prog.html"); //invoke prog.html  and  print  it  to webpage

HTML.AnimateHtml("prog2.html");//invoke prog2.html  and  print  it  to webpage
}

}




</LOGIC>
</JSTAR>



prog.html
---------


<script>
var c = document.getElementById("myCanvas");
var ctx = c.getContext("2d");
ctx.fillStyle = "#FF0000";
ctx.fillRect(0,0,150,75);

var c = document.getElementById("myCanvas");
var ctx = c.getContext("2d");
ctx.beginPath();
ctx.arc(95,50,40,0,2*Math.PI);
ctx.stroke();

var c = document.getElementById("myCanvas");
var ctx = c.getContext("2d");
ctx.font = "30px Arial";
ctx.fillText("Hello World",10,50);


// Create gradient
var grd = ctx.createRadialGradient(75,50,5,90,60,100);
grd.addColorStop(0,"red");
grd.addColorStop(1,"white");

// Fill with gradient
ctx.fillStyle = grd;
ctx.fillRect(10,10,150,80);

var c = document.getElementById("myCanvas");
var ctx = c.getContext("2d");
var img = document.getElementById("scream");
ctx.drawImage(img,10,10);
</script>

</body>
</html>


prog2.html
----------




<circle cx="50" cy="50" r="40" stroke="green" stroke-width="4" fill="yellow" />

<defs>
    <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:rgb(255,255,0);stop-opacity:1" />
      <stop offset="100%" style="stop-color:rgb(255,0,0);stop-opacity:1" />
    </linearGradient>
  </defs>
  <ellipse cx="100" cy="70" rx="85" ry="55" fill="url(#grad1)" />
  <text fill="#ffffff" font-size="45" font-family="Verdana" x="50" y="86">SVG</text>
  Sorry, your browser does not support inline SVG.
</body>
</html>


OUTPUT:





Program -4  : chart.jstar
--------------------------


<JSTAR>

<WPACK>

<LOGIC>


public   class  chart

{


 public void  CDOLLAR-Main( ) throws  <EXE>
{

HTML.AnimateHtml("animate.html"); // to perform animation and  print  it  to webpage


}

}




</LOGIC>
</JSTAR>



animate.html
-------------

<rect x="10" y="10" height="110" width="110"
         style="stroke:#ff0000; fill: #0000ff">

        <animateTransform
            attributeName="transform"
            begin="0s"
            dur="20s"
            type="rotate"
            from="0 60 60"
            to="360 60 60"
            repeatCount="indefinite"
        />
    </rect>


    
OUTPUT:


    
    
    
    
    Program- 5: UtilityTimerExample.jstar
    -------------------------------------


<JSTAR>

<WPACK>

<LOGIC>
public  class UtilityTimerExample

{

public void  CDOLLAR-Main( )

{

HTML.displayhtml("a.html"); //invoke  a.html  and  print  it  to webpage

}


}

</LOGIC>
</JSTAR>


a.html
------


<!DOCTYPE html>
<html>
<body>

<p>Image to use:</p>
<img id="scream" src="http://cache.lovethispic.com/uploaded_images/188253-Beauty-.jpg" alt="The Scream" width="220" height="277">

<p>Canvas to fill:</p>
<canvas id="myCanvas" width="250" height="300"
style="border:1px solid #d3d3d3;">
Your browser does not support the HTML5 canvas tag.</canvas>

<p><button onclick="myCanvas()">Try it</button></p>

<script>
function myCanvas() {
    var c = document.getElementById("myCanvas");
    var ctx = c.getContext("2d");
    var img = document.getElementById("scream");
    ctx.drawImage(img,10,10);
}
</script>

</body>
</html>


OUTPUT:
-----------




Note:  JSTAR  follows  CDollar   and  GDollar Technology  concepts
===

Predefined  commands  in JSTAR user  must focus
================================

XMLtoJSON.getXmltoJson  => Converts  xml  file  to  JSON  format.

SESSIONTRACKING  =>  it  is   used  to set  cookie   and  data  for cookie.


SendEmail.Activate(hostname,from, to ,subject,text)

=>  it is used  to send  the mail.


REQURIED  => it  is used   to validate   the  fields.

u.add(data);
u.VALIDATE("key","validatevalue");

IpMatch.isValidIP(Ipaddress) =>  it  is used  to check  the ipaddress..




Advantages of JSTAR Technology
================================

a)  It   has   Pocessed   Advantages  of  CDollar.

b) It   is  mosly   used   in  WebDesign  with  Cloud computing  and  mobile  cloud computing.

c) It  is also  used  in  complicated   WebDesigns..


d)  IT also  supports  Graphics  and  animations...


e)  It  also  supports  Canvas  style  ...


f)  It     is used   to manipulate  large  amount  of Data

G)  It  is   used   with   WDBAJ$ Database;  Hence  attains   more  security.


h)  It  Uses   Themes and  designs   from  WEB1.0..

Which  provide   the  page  more   attraction   to users...

i)  It  is more   attractive   to Customers...

j) You  can    use   Canavas  with    JSTAR   to   develop  a  animation  page .

 k)   Those   who learn   CDollar concepts   can   easily   learn   JSTAR  technology.


Note:   DOTNET, Php  Professionals, C/C++  professionals  can  easily  focus.



Coding Standards for JSTAR
============================

 
 
 <JSTAR>

<WPACK>

<LOGIC>
 
 <!  JSTAR  Logic  !>

</LOGIC>
</JSTAR>

 
 Note : <%  and  %>   is  used   to  write   class   and  it's  logic.
 
 ALL  Program   should  Start   with  <JSTAR>  means  starting  of   a  Program  and  succeded  by   <WPACK>
 
 to load  CDollar  packages  and   </JSTAR>  Means  End  of  the  Program.
 
 
 
 HIDE  Unwanted  code
 --------------------
 
 <------   program  code  ------>
 
 
 MAIN Program:
 -------------
 
 public void  CDOLLAR-Main( )  indicates  MAIN  Program  of  JSTAR
 
 otherwise   it  will  not  run  the   Program
 
 
 STATIC  BLOCK
 -------------
 Shared  means   Static  keyword.
 
 Shared  will  be  executed  first   after that  Main program  will
 
 be  executed.
 
 
 
 Shared 
 
 {
 
 
 
 }
 
{}  =>  This  curly  braces  are mostly  used. 
 
 SOME  OPERATOR KEYWORDS
 -------------------------
 
 AND => &&  in  java
 
 NOT => !
 
 #  =>  !=
 
 
 
 NEW  Keyword
---------------

NEW  is  used  to create   an  instance   in  memmory.



Always  concenterate  on   important   keyword  not need  to
memmorize  at all.


DATATYPES:
-----------


int , char,  double  , float  are  ordinary keywords    of  oops

Programming  language like  C/JAVA/C#/CDollar.



STRUCTURES:
-----------

Always   use   Structure  DATATYPE to  store your  data  in  objects  form

so  that  it  will   reduce   the  storage  allocation   in memmory.

for  one  object  it  takes  only  1 byte of  memmory   for  structures.


CDOLLAR(.c$)
------------

This  is    mostly   used  in  research   and   used  to construct  any  datastructure  and

simillar  to c.

RECYCLE:
-------

Always use  RECYCLE  to  make  the unwanted object  to  be    garbage  collected.



//
----


If  you want  to   describe  something about   your  functions

use  // . Don't  use  it  unnessary at  any way.



Special  Characters
--------------------

@,$%,^,[]  are  not  allowed   in  the JSTAR  program


~ 
---

Use   Destructor  keyword  to  specify non JSTAR  resource  deletion  code to 

be  goes when   you it..



Other  Things
-------------

for  loop  , if statements, while  loop, do  while ,

for each, Switch  statements, AutoBoxing , Generics , etc

are  same.

Did  JSTAR support pointer
-----------------------------


YES.

private LList nextNode =null;


consider  this  line  ;  This  line   creates  a  pointer   to  a  class  

LList . 


 nextNode=new LList(datum);
 
 This  statements  are   use  to insert first data  to Linkedlist

 nextNode.add(datum)  is  used  to  insert  many data....
 

 
 
Class   Inheritance
-------------------

If  the  Class  is  using  another  class  variable  in  that case

you  had  to  use   <---  "extends" backward arrows  
and  front  arrows -->    for  implements..

Implements  is  used   when  you  use  friend  function.





UNIT-3: MISC
================
 

QUESTION:
========
Write  a  JStar   Program for  Registration  form

and  enter  the  details  and  store  it  in a file  and  retrieve  the  contents  and display the  params   in  textarea  with  table  format  

in  another  webpage..



Program :1
===========


<JSTAR>

<WPACK>

<LOGIC>


public  class  Register

{




public void  CDOLLAR-Main( ) throws <EXE>
{

HTML.displayhtml("Register1.html");
}   

}





</LOGIC>
</JSTAR>





Register1.html
=============





<html >
  <head>
    <title>GCLOUDOS  USER  REGISTRATION</title>
    
  </head>

  <body bgcolor=gold class="fancy">
<form action="http://localhost:8080/first5.jstar" method="post" >

<div id="pageContainer">
      <img src="images/banner1.png" alt="GCLOUD OS @  Jemin Information Technology (C)  ALL  RIGHTS  RESERVED">
      <div id="pageContent">

        <div id="chaptersAccordion">

            <h2><a href="#chapter1">Enter your  System Details</a></h2>
            <div>
              

<p>Enter  the Name: <input type="text" name="name" size="25" /></p>
<p>Enter your Username : <input type="text" name="uname" size="15"/></p>
<p>Enter  the password : <input type="password" name="password" size="25" /></p>
<p>Choose your  state  : <input type="text" name="state" sixe="15"/></p>
<p>Choose  your  Country  : <input type="text" name="country" sixe="15"/></p>

<p>Enter  the system  password : <input type="password" name="spwd" size="25" /></p>
<p>Enter your secret  password text : <input type="text" name="stext" sixe="15"/></p>

<p>Enter  your family details : <input type="text" name="familydet" size="25" /></p>

<p>Choose  your Identification   (PAN/green card etc) : <input type="text" name="Indent" sixe="5"/></p>

<p>Enter your Identification  details (PAN/green card etc) : <input type="text" name="CIndent" size="15"/></p>

<p>Choose  your Personal  Identification   (PAN/green card etc) : <input type="text" name="PIndent" size="15"/></p>

<p>Chose  your  Scheme OS plan : <input type="text" name="Splan" size="25" /></p>

            </div>


<h2><a href="#chapter2">REGISTER</a></h2>
            <div>
              <input type="submit" name="Click">
<input type="reset" name="Clear">
            </div>


</form>

</body>
</html>





first5.jstar
=============




<JSTAR>

<WPACK>

<USE> CDollar.WDBA.*;
<USE> CDollar.format.*;
<LOGIC>


public class  first5
{


public void  CDOLLAR-Main( ) throws  <EXE>

{

<HMAP>    <Integer,<Str>> mp1  =  <NEW>  <HMAP><Integer,<Str>>();//hshmap
<HMAP>   <Integer,<Str>> mp2  =  <NEW>  <HMAP><Integer,<Str>>();
<AList>  <<HMAP>> arar  =  <NEW>   <AList><<HMAP>>();<AList><<HMAP>>   arar1  =  <NEW>   <AList><<HMAP>>();//arraylsit  with  hashmap

<Str>  ar=null;
<Str>  ar1=null;

<Str>  ar2=null;
<Str>  ar3=null;<Str>  ar4=null;
<Str>  ar5=null;<Str>  ar6=null;
<Str>  ar7=null;<Str>  ar8=null;
<Str>  ar9=null;<Str>  ar10=null;
<Str>  ar11=null;
CDollar.out.println("<html>");

HTML.displayhtml("design.html"); //set  the  page  as  gold  color  and  table  as pink color
TABLE.displayctableA("blue","PARAMS"); 

FileManipulation  fp = <NEW>  FileManipulation();

 <TRY>
{


ar=hitcount.requestParam(0);ar1=hitcount.requestParam(1);//get  the  parameters  stored in  log.txt  file
ar2=hitcount.requestParam(2);
ar3=hitcount.requestParam(3);
ar4=hitcount.requestParam(4);
ar5=hitcount.requestParam(5);
ar6=hitcount.requestParam(6);
ar7=hitcount.requestParam(7);
ar8=hitcount.requestParam(8);
ar9=hitcount.requestParam(9);
ar10=hitcount.requestParam(10);
ar11=hitcount.requestParam(11);

hitcount.SplitParam(ar);hitcount.SplitParam(ar1);hitcount.SplitParam(ar2);hitcount.SplitParam(ar3);hitcount.SplitParam(ar4);hitcount.SplitParam(ar5);hitcount.SplitParam(ar6);

hitcount.SplitParam(ar7);hitcount.SplitParam(ar8);hitcount.SplitParam(ar9);hitcount.SplitParam(ar10);hitcount.SplitParam(ar11);  //  split  the parameters


mp1.put(1,hitcount.params.get(3).to<Str>());  /put  the  parameters  in   map
mp1.put(2,hitcount.params.get(6).to<Str>());
mp1.put(3,hitcount.params.get(9).to<Str>());
mp1.put(4,hitcount.params.get(12).to<Str>());
mp1.put(5,hitcount.params.get(15).to<Str>());
mp1.put(6,hitcount.params.get(18).to<Str>());
mp1.put(7,hitcount.params.get(21).to<Str>());
mp1.put(8,hitcount.params.get(24).to<Str>());
mp1.put(9,hitcount.params.get(27).to<Str>());
mp1.put(10,hitcount.params.get(30).to<Str>());
mp1.put(11,hitcount.params.get(33).to<Str>());mp1.put(12,hitcount.params.get(36).to<Str>());

arar.add(mp1);

mp2.put(1,hitcount.params.get(3).to<Str>());
mp2.put(2,hitcount.params.get(15).to<Str>());arar1.add(mp2);

fp.insert(arar1,"/media/D/"+hitcount.params.get(3).to<Str>()+".wdba");//insert  the  3rd  parameters  in  to the  file  in  D  drive 
fp.insert(arar,"/media/D/"+hitcount.params.get(6).to<Str>()+".wdba");//insert the  6th   parameters  in  to the  file in  D drive


TABLE.displaytext(fp.retrieveDB("/media/D/"+hitcount.params.get(6).to<Str>()+".wdba"),10,20);//  display  in TABLE FORMAT
TABLE.displaytext(fp.retrieveDB("/media/D/"+hitcount.params.get(3).to<Str>()+".wdba"),10,20); //display in  table format

CDollar.out.println("<table>");


CDollar.out.println("</html>");






}
<CATCH> (<EXE> e) {
CDollar.out.println("error="+e);
}



}
}



</LOGIC>
</JSTAR>








Question:
=======
Write  a Program   to  convert  XMLtoJSON  using  JStar:-




<JSTAR>

<WPACK>

<LOGIC>


public   class  JSONS

{

public void  CDOLLAR-Main( )
{

HTML.displayhtml("wil.xml");  //  display   the   contents  of  a  file
XMLtoJson.getXMLtoJson("wil.xml");  //converts   xml  to json  and  display  in  a  webpage
}

}




</LOGIC>
</JSTAR>







Note:   JSTAR technology  units    are   upto    10  units. Any way some of  JSTAR  advantages  are  mention,

but many  things  will be mention  in JSTAR  ebook.  

JSTAR   remoteserver   is  not opensource   but    study  material  is free...

JSTAR   uses   proxy  and  remote  server   to  publish   the  webpages in mobile  ,WALLET,Browsers , and  all devices..


here  in this  example  

 proxy port  : 9999

remote port  :8080



